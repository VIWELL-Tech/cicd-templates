name: Build & Push Docker Image to ECR(NONPROD_account)

on:
  workflow_call:
    secrets:
      VIWELL_AWS_DEV_ACCESS_KEY_ID:
        description: "AWS ACCESS KEY"
        required: true
      VIWELL_AWS_DEV_SECRET_ACCESS_KEY:
        description: "AWS SECRET KEY"
        required: true
      NPM_TOKEN:
        description: "Additional tag to select a runner for the job execution"
        required: false
    inputs:
      ENVIRONMENT:
        description: "Which env this workflow will be building and deploying to"
        required: true
        type: string
      RUNS_ON:
        description: "Additional tag to select a runner for the job execution"
        required: false
        type: string
        default: "self-hosted"
      DEPLOY_NAME:
        description: "Additional tag to select a runner for the job execution"
        required: false
        type: string
      ECR_REPOSITORY:
        description: "Additional tag to select a runner for the job execution"
        required: false
        type: string

        

jobs:

  build:
    runs-on: 
      - self-hosted
      - ${{ inputs.RUNS_ON }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.VIWELL_AWS_DEV_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VIWELL_AWS_DEV_SECRET_ACCESS_KEY }}
          aws-region: me-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create Docker image tag
        id: vars
        run: echo "TAG=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ENV: ${{ inputs.ENVIRONMENT }}
          ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "${{ vars.ENV_DEV }}"
          echo "${{ vars.ENV_DEV }}" > .env
          TAG=${{ steps.vars.outputs.TAG }}
          docker build . -t $ECR_REGISTRY/$ENV/$ECR_REPOSITORY:$TAG
          docker tag $ECR_REGISTRY/$ENV/$ECR_REPOSITORY:$TAG $ECR_REGISTRY/$ENV/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ENV/$ECR_REPOSITORY:$TAG
          docker push $ECR_REGISTRY/$ENV/$ECR_REPOSITORY:latest
          echo "tag=$TAG" >> $GITHUB_ENV


  deploy:
    needs: build
    runs-on: 
      - self-hosted
      - ${{ inputs.RUNS_ON }}
    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'
      - name: Configure EKS
        run: |
          if [ "${{ inputs.ENVIRONMENT }}" = "staging" ]; then
            kubectl rollout restart deployment ${{ inputs.DEPLOY_NAME }} --namespace=viwell-preprod
            echo "Deployment restarted in Staging env"
          elif [ "${{ inputs.ENVIRONMENT }}" = "prod" ]; then
            kubectl rollout restart deployment ${{ inputs.DEPLOY_NAME }} --namespace=prod-viwell
            echo "Deployment restarted in Prod env"
          else
            echo "::error::Unknown environment '${{ inputs.ENVIRONMENT }}'"
            exit 1
          fi
